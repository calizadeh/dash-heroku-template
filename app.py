import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates
import plotly.graph_objects as go
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
import dash
from jupyter_dash import JupyterDash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import warnings
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

data = pd.read_csv('NaserAlizadeh_glucose_3-18-2022.csv')
data = data[['Generated by', '03-19-2022 01:55 AM UTC', 'Naser Alizadeh']]
data = data.rename(columns={"Generated by": "Record Type", "03-19-2022 01:55 AM UTC": "Date/Time", "Naser Alizadeh": "Glucose (mg/dL)"})
data = data[1:]
data['Date/Time'] = pd.to_datetime(data['Date/Time'])
data['month'] = [x.month for x in data['Date/Time']]
data["month"] = data.month.map("{:02}".format)
data['day'] = [x.day for x in data['Date/Time']]
data['year'] = [x.year for x in data['Date/Time']]
data['hour'] = [x.hour for x in data['Date/Time']]
data['minute'] = [x.minute for x in data['Date/Time']]
data['second'] = [x.second for x in data['Date/Time']]
data['date'] = pd.to_datetime(data[['month', 'day', 'year']])
data['time'] = (pd.to_datetime(data['hour'].astype(str) + ':' + data['minute'].astype(str), format='%H:%M').dt.time)
data.dropna(subset=['Glucose (mg/dL)'], inplace=True)
data = data.astype({'Glucose (mg/dL)':'float', 'time': 'str'})
data['Upper Sugar Level'] = data['Glucose (mg/dL)'] * 1.10
data['Lower Sugar Level'] = data['Glucose (mg/dL)'] * 0
data['range'] = 'In Range'
data.loc[data['Glucose (mg/dL)'] < 75, 'range'] = 'Out of Range'
data.loc[data['Glucose (mg/dL)'] > 150, 'range'] = 'Out of Range'
data['week'] = data['year'].astype(str) + str("- Week ") + data['Date/Time'].dt.week.astype(str)

def graph_it(i):
    upper_bound = [150] * len(i)
    lower_bound = [75] * len(i)

    upper_thresh = 150
    lower_thresh = 75

    upper_ci = i['Glucose (mg/dL)']*1.10
    upper_ci = np.array(upper_ci, dtype=float)
    lower_ci = i['Glucose (mg/dL)']*0.90
    lower_ci = np.array(lower_ci, dtype=float)

    over = i[i['Glucose (mg/dL)'] > upper_thresh]
    under = i[i['Glucose (mg/dL)'] < lower_thresh]
    middle = i[(i['Glucose (mg/dL)'] <= upper_thresh) & (i['Glucose (mg/dL)'] >= lower_thresh)]

    over2 = i[i['Upper Sugar Level'] > upper_thresh]
    under2 = i[i['Upper Sugar Level'] < lower_thresh]
    middle2 = i[(i['Upper Sugar Level'] <= upper_thresh) & (i['Upper Sugar Level'] >= lower_thresh)]

    over3 = i[i['Lower Sugar Level'] > upper_thresh]
    under3 = i[i['Lower Sugar Level'] < lower_thresh]
    middle3 = i[(i['Lower Sugar Level'] <= upper_thresh) & (i['Lower Sugar Level'] >= lower_thresh)]

    plt.rcParams["figure.figsize"] = (15,10)
    plt.scatter(over['Date/Time'],over['Glucose (mg/dL)'], color = "red", alpha = 0.75, s = 20)
    plt.scatter(under['Date/Time'],under['Glucose (mg/dL)'], color = "red", alpha = 0.75, s = 20)
    plt.scatter(middle['Date/Time'],middle['Glucose (mg/dL)'], color = "green", alpha = 1, s = 20)

    plt.scatter(over2['Date/Time'],over2['Upper Sugar Level'], color = "red", alpha = 0)
    plt.scatter(under2['Date/Time'],under2['Upper Sugar Level'], color = "red", alpha = 0)
    plt.scatter(middle2['Date/Time'],middle2['Upper Sugar Level'], color = "green", alpha = 0)

    plt.scatter(over3['Date/Time'],over3['Lower Sugar Level'], color = "red", alpha = 0)
    plt.scatter(under3['Date/Time'],under3['Lower Sugar Level'], color = "red", alpha = 0)
    plt.scatter(middle3['Date/Time'],middle3['Lower Sugar Level'], color = "green", alpha = 0)


    two = plt.scatter(i['Date/Time'],upper_ci, color = "grey", s = 20, alpha = 0)
    three = plt.scatter(i['Date/Time'],lower_ci, color = "grey", s = 20, alpha = 0)
    five = plt.plot(i['Date/Time'],upper_bound, color = "black")
    six = plt.plot(i['Date/Time'],lower_bound, color = "black")
    plt.fill_between(i['Date/Time'],lower_bound, upper_bound, color = 'lightgrey', alpha = 0.25)
    plt.fill_between(i['Date/Time'],upper_ci, lower_ci, color = 'lightgrey', alpha = 0.3)

    # beautify the x-labels
    plt.ylim([0,400])
    plt.show()
    
data_aic = data.groupby('date').mean().reset_index()
data_aic['AIC'] = round((data_aic['Glucose (mg/dL)'] + 46.7)/ (28.7),2)
data_aic['aic_7day_avg'] = data_aic.AIC.rolling(14).mean().shift(-3)
plt.figure(figsize=[25,15])
myplot_5 = px.line(data_aic, x='date', y='AIC')
myplot_6 = px.line(data_aic, x="date",y="aic_7day_avg",
             title="7-day Avg",
             width=2000, height=500,)

app = JupyterDash(__name__, external_stylesheets=external_stylesheets)

app.layout = html.Div(
 [
        html.H1("Project Dad"),
     
        html.H2("Comparing Males and Females Participants of the Survey"),
        
        dcc.Markdown(children = "The following table compares the income, prestige score of current role, socioeconomic index, and eduation level of male and female participants."),
     
        dcc.Graph(figure=myplot_6),
    
    ]
)



if __name__ == '__main__':
    app.run_server(debug=True)
